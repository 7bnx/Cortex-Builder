"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Replace = exports.New = void 0;
const fs = require("fs");
const vscode = require("vscode");
const path = require("path");
const fileName = "Startup.s";
const dirPath = vscode.workspace.workspaceFolders ? vscode.workspace.workspaceFolders[0].uri.fsPath : '';
function New(projectPath, controller) {
    Replace(controller.core, controller.startupFPU, controller.interrupts, projectPath);
}
exports.New = New;
function Replace(core, controllerFPU, interrupts, projectPath = dirPath) {
    let isrList = "";
    interrupts.forEach(interrupt => {
        isrList += "\t.word " + interrupt + "\n";
    });
    let isrHandlers = "";
    for (let i = 1; i < interrupts.length; ++i) {
        if (interrupts[i] !== "0") {
            isrHandlers += "\t.weak " + interrupts[i] + "\n" +
                "\t.thumb_set " + interrupts[i] + ",Default_Handler" + "\n\n";
        }
    }
    let data = `
//-----------------------------------------------------------------------------------
//	Generated by Cortex-Builder extension fo Visual Studio code
//	Author: Semyon Ivanov
//	e-mail: agreement90@mail.ru
//	repo: https://github.com/7bnx/Cortex-Builder
//-----------------------------------------------------------------------------------


/*---------------------------------------------------------------------------------*/
/*	Directives*/
/*---------------------------------------------------------------------------------*/
.cpu ${core}
.fpu ${controllerFPU}
.syntax unified
.thumb
/*---------------------------------------------------------------------------------*/
/*	End of Directives*/
/*---------------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------------*/
/*	Global*/
/*---------------------------------------------------------------------------------*/
.global g_ISR_Vectors
.global Default_Handler
/*---------------------------------------------------------------------------------*/
/*	End of Global*/
/*---------------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------------*/
/*	Linker vars*/
/*---------------------------------------------------------------------------------*/
.word _sidata
.word _sdata
.word _edata
.word _sbss
.word _ebss
/*---------------------------------------------------------------------------------*/
/*	End of Linker vars*/
/*---------------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------------*/
/*	Default Handler*/
/*---------------------------------------------------------------------------------*/
	.section .text.Default_Handler,"ax",%progbits
Default_Handler:
	Infinite_Loop:
		b Infinite_Loop
	.size Default_Handler, .-Default_Handler
/*---------------------------------------------------------------------------------*/
/*	End of Default Handler*/
/*---------------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------------*/
/*	Reset Handler*/
/*---------------------------------------------------------------------------------*/
	.section .text.Reset_Handler
	.weak Reset_Handler
	.type Reset_Handler, %function
Reset_Handler:
	ldr r0, =ENDRAM
	mov sp, r0

	ldr r0, =_sdata
	ldr r1, =_edata
	ldr r2, =_sidata
	movs r3, #0
	b LoopCopyDataInit

CopyDataInit:
	ldr r4, [r2, r3]
	str r4, [r0, r3]
	adds r3, r3, #4

LoopCopyDataInit:
	adds r4, r0, r3
	cmp r4, r1
	bcc CopyDataInit

	ldr r2, =_sbss
	ldr r4, =_ebss
	movs r3, #0
	b LoopFillZerobss

FillZerobss:
	str  r3, [r2]
	adds r2, r2, #4
LoopFillZerobss:
	cmp r2, r4
	bcc FillZerobss

	bl __libc_init_array
	bl main

LoopForever:	b LoopForever
.size Reset_Handler, .-Reset_Handler
/*---------------------------------------------------------------------------------*/
/*	End of Reset Handler*/
/*---------------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------------*/
/*	ISR Vectors*/
/*---------------------------------------------------------------------------------*/
	.section .isr_vector,"a",%progbits
	.type g_ISR_Vectors, %object
	.size g_ISR_Vectors, .-g_ISR_Vectors


g_ISR_Vectors:
  .word ENDRAM
${isrList}
/*---------------------------------------------------------------------------------*/
/*	End of ISR Vectors*/
/*---------------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------------*/
/*	ISR Handlers*/
/*---------------------------------------------------------------------------------*/
${isrHandlers}
/*---------------------------------------------------------------------------------*/
/*	End of ISR Handlers*/
/*---------------------------------------------------------------------------------*/`;
    if (!fs.existsSync(projectPath)) {
        fs.mkdirSync(projectPath, { recursive: true });
    }
    fs.writeFile(path.join(projectPath, fileName), data, () => { });
}
exports.Replace = Replace;
//# sourceMappingURL=Startup.js.map